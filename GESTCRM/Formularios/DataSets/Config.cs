//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace GESTCRM.DataSets {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Config : DataSet {
        
        private ConfiguracionDataTable tableConfiguracion;
        
        public Config() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Config(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Configuracion"] != null)) {
                    this.Tables.Add(new ConfiguracionDataTable(ds.Tables["Configuracion"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConfiguracionDataTable Configuracion {
            get {
                return this.tableConfiguracion;
            }
        }
        
        public override DataSet Clone() {
            Config cln = ((Config)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Configuracion"] != null)) {
                this.Tables.Add(new ConfiguracionDataTable(ds.Tables["Configuracion"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableConfiguracion = ((ConfiguracionDataTable)(this.Tables["Configuracion"]));
            if ((this.tableConfiguracion != null)) {
                this.tableConfiguracion.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Config";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Config.xsd";
            this.Locale = new System.Globalization.CultureInfo("es-ES");
            this.CaseSensitive = false;
            this.EnforceConstraints = false;
            this.tableConfiguracion = new ConfiguracionDataTable();
            this.Tables.Add(this.tableConfiguracion);
        }
        
        private bool ShouldSerializeConfiguracion() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ConfiguracionRowChangeEventHandler(object sender, ConfiguracionRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConfiguracionDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columniIdConfig;
            
            private DataColumn columnsConfig;
            
            private DataColumn columnsValor;
            
            private DataColumn columndFUM;
            
            internal ConfiguracionDataTable() : 
                    base("Configuracion") {
                this.InitClass();
            }
            
            internal ConfiguracionDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn iIdConfigColumn {
                get {
                    return this.columniIdConfig;
                }
            }
            
            internal DataColumn sConfigColumn {
                get {
                    return this.columnsConfig;
                }
            }
            
            internal DataColumn sValorColumn {
                get {
                    return this.columnsValor;
                }
            }
            
            internal DataColumn dFUMColumn {
                get {
                    return this.columndFUM;
                }
            }
            
            public ConfiguracionRow this[int index] {
                get {
                    return ((ConfiguracionRow)(this.Rows[index]));
                }
            }
            
            public event ConfiguracionRowChangeEventHandler ConfiguracionRowChanged;
            
            public event ConfiguracionRowChangeEventHandler ConfiguracionRowChanging;
            
            public event ConfiguracionRowChangeEventHandler ConfiguracionRowDeleted;
            
            public event ConfiguracionRowChangeEventHandler ConfiguracionRowDeleting;
            
            public void AddConfiguracionRow(ConfiguracionRow row) {
                this.Rows.Add(row);
            }
            
            public ConfiguracionRow AddConfiguracionRow(long iIdConfig, string sConfig, string sValor, System.DateTime dFUM) {
                ConfiguracionRow rowConfiguracionRow = ((ConfiguracionRow)(this.NewRow()));
                rowConfiguracionRow.ItemArray = new object[] {
                        iIdConfig,
                        sConfig,
                        sValor,
                        dFUM};
                this.Rows.Add(rowConfiguracionRow);
                return rowConfiguracionRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ConfiguracionDataTable cln = ((ConfiguracionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ConfiguracionDataTable();
            }
            
            internal void InitVars() {
                this.columniIdConfig = this.Columns["iIdConfig"];
                this.columnsConfig = this.Columns["sConfig"];
                this.columnsValor = this.Columns["sValor"];
                this.columndFUM = this.Columns["dFUM"];
            }
            
            private void InitClass() {
                this.columniIdConfig = new DataColumn("iIdConfig", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columniIdConfig);
                this.columnsConfig = new DataColumn("sConfig", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsConfig);
                this.columnsValor = new DataColumn("sValor", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsValor);
                this.columndFUM = new DataColumn("dFUM", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndFUM);
            }
            
            public ConfiguracionRow NewConfiguracionRow() {
                return ((ConfiguracionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ConfiguracionRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ConfiguracionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConfiguracionRowChanged != null)) {
                    this.ConfiguracionRowChanged(this, new ConfiguracionRowChangeEvent(((ConfiguracionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConfiguracionRowChanging != null)) {
                    this.ConfiguracionRowChanging(this, new ConfiguracionRowChangeEvent(((ConfiguracionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConfiguracionRowDeleted != null)) {
                    this.ConfiguracionRowDeleted(this, new ConfiguracionRowChangeEvent(((ConfiguracionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConfiguracionRowDeleting != null)) {
                    this.ConfiguracionRowDeleting(this, new ConfiguracionRowChangeEvent(((ConfiguracionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveConfiguracionRow(ConfiguracionRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConfiguracionRow : DataRow {
            
            private ConfiguracionDataTable tableConfiguracion;
            
            internal ConfiguracionRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableConfiguracion = ((ConfiguracionDataTable)(this.Table));
            }
            
            public long iIdConfig {
                get {
                    try {
                        return ((long)(this[this.tableConfiguracion.iIdConfigColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableConfiguracion.iIdConfigColumn] = value;
                }
            }
            
            public string sConfig {
                get {
                    try {
                        return ((string)(this[this.tableConfiguracion.sConfigColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableConfiguracion.sConfigColumn] = value;
                }
            }
            
            public string sValor {
                get {
                    try {
                        return ((string)(this[this.tableConfiguracion.sValorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableConfiguracion.sValorColumn] = value;
                }
            }
            
            public System.DateTime dFUM {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableConfiguracion.dFUMColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableConfiguracion.dFUMColumn] = value;
                }
            }
            
            public bool IsiIdConfigNull() {
                return this.IsNull(this.tableConfiguracion.iIdConfigColumn);
            }
            
            public void SetiIdConfigNull() {
                this[this.tableConfiguracion.iIdConfigColumn] = System.Convert.DBNull;
            }
            
            public bool IssConfigNull() {
                return this.IsNull(this.tableConfiguracion.sConfigColumn);
            }
            
            public void SetsConfigNull() {
                this[this.tableConfiguracion.sConfigColumn] = System.Convert.DBNull;
            }
            
            public bool IssValorNull() {
                return this.IsNull(this.tableConfiguracion.sValorColumn);
            }
            
            public void SetsValorNull() {
                this[this.tableConfiguracion.sValorColumn] = System.Convert.DBNull;
            }
            
            public bool IsdFUMNull() {
                return this.IsNull(this.tableConfiguracion.dFUMColumn);
            }
            
            public void SetdFUMNull() {
                this[this.tableConfiguracion.dFUMColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ConfiguracionRowChangeEvent : EventArgs {
            
            private ConfiguracionRow eventRow;
            
            private DataRowAction eventAction;
            
            public ConfiguracionRowChangeEvent(ConfiguracionRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ConfiguracionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
